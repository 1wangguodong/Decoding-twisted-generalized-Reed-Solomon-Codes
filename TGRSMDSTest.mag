
/*
  Extended euclidean algorithm decoding GRS code
*/
size := 2^8;
FF<w> := GF(size);
FX<x> := PolynomialRing(FF);

load "./Decoding.mag";

load "./param1/param_10_6_5_1.mag";
// load "./param1/param_10_6_5_2.mag";
// load "./param1/param_10_6_5_3.mag";
// load "./param1/param_10_6_5_4.mag";
// load "./param1/param_10_6_5_5.mag";
// load "./param1/param_10_6_5_6.mag";

// load "./param1/param_11_5_7_1.mag";
// load "./param1/param_11_5_7_2.mag";
// load "./param1/param_11_5_7_3.mag";
// load "./param1/param_11_5_7_4.mag";
// load "./param1/param_11_5_7_5.mag";

// load "./param1/param_12_6_7_1.mag";
// load "./param1/param_12_6_7_2.mag";
// load "./param1/param_12_6_7_3.mag";
// load "./param1/param_12_6_7_4.mag";
// load "./param1/param_12_6_7_5.mag";
// load "./param1/param_12_6_7_6.mag";

// load "./param1/param_13_9_5_1.mag";
// load "./param1/param_13_9_5_2.mag";
// load "./param1/param_13_9_5_3.mag";
// load "./param1/param_13_9_5_4.mag";
// load "./param1/param_13_9_5_5.mag";
// load "./param1/param_13_9_5_6.mag";
// load "./param1/param_13_9_5_7.mag";
// load "./param1/param_13_9_5_8.mag";
// load "./param1/param_13_9_5_9.mag";


function ErrorWord(n, en, siz)
    err := RandomSubset(Set([1..n]), en); // error location

    ev := [w]; // 错误向量这里需要先给一个该域中的元素不然后面提示错误。无语
    Prune(~ev);
    for i:=1 to n do
        if i in err then
            r := Random(1, siz-1);
            Append(~ev, w^r);
        else
            Append(~ev, 0);
        end if;
    end for;
    return ev;
end function;

function ReceivedCode(n, G, siz, ev)
    s := 0 * G[1];
    for i:=1 to Nrows(G) do
        r := Random(1, siz-1);
        s := s + w^r * G[i];
    end for;
    // "send:", s; // 消息
    sr := [w]; // 接收到的消息
    Prune(~sr);
    for i:=1 to n do
        Append(~sr, s[i] + ev[i]);
    end for;
    // "receive:",sr;
    return sr;
end function;

function SyndromePoly(n, k, H, re)
    S := H * Transpose(Matrix(1, n, re));
    // "S:",S;
    SX := 0;
    for i:=1 to n-k do
        SX := SX + S[i][1]*x^(n-k-i);
    end for;
    return SX;
end function;

function Gen(n, k, ni, et, A, V)
    G := ZeroMatrix(FF, k, n); // 该码的生成矩阵

    for i :=1 to k do
        for j :=1 to n do
            G[i,j] := A[j]^(i-1) * V[j];
            if i eq ni then
                G[i,j] := A[j]^(i-1) * V[j] + et * A[j] ^ k *  V[j];
            end if;
        end for;
    end for;
    return G;
end function;

function CheckPoly(n, k, ni, A)
    GX := 1;
    for j := 1 to n do
        GX := GX * (x-A[j]);
    end for;
    DGX := Derivative(GX);

    U := ZeroMatrix(FF, 1, n);

    for j :=1 to n do
        U[1,j] := Evaluate(DGX, A[j])^(-1);
    end for;
    B := [w,1];
    Prune(~B);
    aa := 0;
    for j :=1 to n do
        aa := aa + U[1,j] * A[j]^(n-1);
    end for;

    for j := 1 to k-ni do
        ama := 0;
        for r:=0 to j-1 do
            ab := 0;
            for aj := 1 to n do
                ab := ab + U[1,aj] * A[aj]^(n+j-1-r);
            end for;
            ama := ama + B[r+1] * ab;
        end for;
        
        bj := - ama * aa^(-1);
        Append(~B, bj);
    end for;

    lb := 0;
    for r:=0 to k-ni do
        ab := 0;
        for aj := 1 to n do
            ab := ab + U[1,aj] * A[aj]^(n+k-ni-r);
        end for;
        lb := lb + B[r+1] * ab;
    end for;

    lb := lb * eta + B[1] * aa;

    Append(~B, -lb*aa^(-1)*eta^(-1));
    ff := 0;
    for j :=1 to #B do
        ff := ff + B[j] * x^(n-ni-j+1); 
    end for;
    return ff;
end function;

function CheckEvalPoint(n, A, V)
    GX := 1;
    for j := 1 to n do
        GX := GX * (x-A[j]);
    end for;
    DGX := Derivative(GX);

    GS := ZeroMatrix(FF, 1, n); // 对偶码的单项等价向量
    for j :=1 to n do
        GS[1,j] := Evaluate(DGX, A[j])^(-1) * V[j]^(-1);
    end for;
    return GS;
end function;

function CheckMatrix(n, k, A, GS, ff)

    DG2 := ZeroMatrix(FF, n - k, n); // 校验矩阵
    for i :=1 to n-k-1 do
        for j :=1 to n do
            DG2[i,j] := A[j]^(i-1) * GS[1,j];
        end for;
    end for;

    for j:=1 to n do
        DG2[n-k,j] := GS[1,j]*Evaluate(ff, A[j]);
    end for;
    return DG2;
end function;

function checkMDS(G)
    md := 0;
    n := Ncols(G);
    k := Nrows(G);
    mds := IsMDS(LinearCode(G));
    if mds then
        "IS MSD";
        md := n-k+1;
    else 
        "IS NOT MDS";
        md := n-k;
    end if;
    return md;
end function;

k := n-t; // 维数
md := n - k + 1;


G := Gen(n, k, ni, eta, A, V);
md := checkMDS(G);
ff := CheckPoly(n, k, ni, A);
W := CheckEvalPoint(n, A, V);
H := CheckMatrix(n, k, A, W, ff);
hd := Floor((md-1) / 2);

"A:", A;
"V:", V;
"Twisted row:", ni;
"eta:", eta;
"G matrix:", G;
"Minimum:", md;
"Isdual:", Dual(LinearCode(H)) eq LinearCode(G);
"check matrix ploy ff:", ff;
"check matrix:", H;

// // error number
ec := hd;

t1 := Cputime();

"DecodingMethod1 10000 times!";

for i :=1 to 10000 do
        
    ev := ErrorWord(n, ec, size);
    sr := ReceivedCode(n, G, size, ev);
    SX := SyndromePoly(n, k, H, sr);
    ree1 := DecodingMethod1(t, SX, hd, A, W, ff - x^(t-1));
    if ree1 ne ev then
        ev;
        ree1;
        "DecodingMethod1 decoding failed!";
    end if;
end for;

Cputime(t1);

t2 := Cputime();

"EEADecoding 10000 times!";
for i :=1 to 10000 do
    ev := ErrorWord(n, ec, size);
    sr := ReceivedCode(n, G, size, ev);
    SX := SyndromePoly(n, k, H, sr);
    ree1 := EEADecoding(t, SX, hd, A, W, ff - x^(t-1));
    if ree1 ne ev then
        ev;
        ree1;
        "EEA decoding failed!";
    end if;
end for;

Cputime(t2);
